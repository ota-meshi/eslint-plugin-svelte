import path from "path"
import fs from "fs"
import { rules } from "./lib/load-rules"

const baseContent = `export = {
  plugins: ["svelte"],
  overrides: [
    {
      files: ["*.svelte"],
      parser: require.resolve("svelte-eslint-parser"),
      rules: {
        // ESLint core rules known to cause problems with \`.svelte\`.
        "no-inner-declarations": "off", // The AST generated by svelte-eslint-parser will false positives in it rule because the root node of the script is not the \`Program\`.
        // "no-irregular-whitespace": "off",

        // eslint-plugin-svelte rules
        ${rules
          .filter(
            (rule) =>
              rule.meta.docs.recommended === "base" && !rule.meta.deprecated,
          )
          .map((rule) => {
            const conf = rule.meta.docs.default || "error"
            return `"${rule.meta.docs.ruleId}": "${conf}"`
          })
          .join(",\n        ")},
      },
    },
  ],
}
`

const baseFilePath = path.resolve(__dirname, "../src/configs/base.ts")

// Update file.
fs.writeFileSync(baseFilePath, baseContent)

const recommendedContent = `import path from "path"
const base = require.resolve("./base")
const baseExtend =
  path.extname(\`\${base}\`) === ".ts" ? "plugin:svelte/base" : base
export = {
  extends: [baseExtend],
  rules: {
    // eslint-plugin-svelte rules
    ${rules
      .filter((rule) => rule.meta.docs.recommended && !rule.meta.deprecated)
      .map((rule) => {
        const conf = rule.meta.docs.default || "error"
        return `"${rule.meta.docs.ruleId}": "${conf}"`
      })
      .join(",\n    ")},
  },
}
`

const recommendedFilePath = path.resolve(
  __dirname,
  "../src/configs/recommended.ts",
)

// Update file.
fs.writeFileSync(recommendedFilePath, recommendedContent)

// Format files.
// const linter = new eslint.CLIEngine({ fix: true })
// const report = linter.executeOnFiles([filePath])
// eslint.CLIEngine.outputFixes(report)
